name: 'Orleans build y push'
#on:
#  push:
#    branches:
#      - main
#      - testBuild
#    tags:
#      - 'test*'
#on:
# push:
#    branches:
#      - main
#    paths:
#      - "grains/**"
inputs:
  ACR_USERNAME:
    description: "user de acr"
    required: true
    default: ''
  ACR_PASSWORD:
    description: "passwrd de acr"
    required: true
    default: ''
  ACR_NAME:
    description: "nommbre del acr"
    required: true
    default: ''
  ACR_FULL_NAME:
    description: "nombre del acr con azurecr.io"
    required: true
    default: ''
  appName:
    description: "Nombre de la aplicacion (dentro del proyecto)"
    required: true
    default: orleans-grain
  teamProject:
    description: "Nombre del proyecto/equipo"
    required: true
    default: qa
  appVersion:
    description: "tag para subir imagen"
    required: true
    default: latest
  ARGO_USERNAME:
    description: "usuario de ARgocd"
    required: true
  ARGO_PASSWORD:
    description: "pass de ARgocd"
    required: true
  ARGO_URL:
    description: "url de ARgocd"
    required: true
  helmChartVersionLatestQa:
    description: "VersionHelm"
    required: true

      
#env:
  #Es un valor que viene del secreto, pero el install de helm lo espera cmo variable 'plana'
#  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
runs:
  using: "composite"
  steps:
      - run: echo hi!, we working.
        shell: bash
      - name: Instalar con argocd en 'qa'
        run: |-
          #Ellos intentan 10 veces todos los pasos, con un sleep 20
          echo '${{ inputs.ACR_PASSWORD }}' | helm registry login ${{ inputs.ACR_FULL_NAME }} --username ${{ inputs.ACR_USERNAME }} --password-stdin
          cp poc-manifiestos-main/values.yaml .
          cp poc-manifiestos-main/Chart.yaml .
          echo 'login a argocd'
          variableOk=0
          argoCommand="argocd login --username ${{ inputs.ARGO_USERNAME }} --password ${{ inputs.ARGO_PASSWORD }} --insecure ${{ inputs.ARGO_URL }} --grpc-web"
          for i in {1..10}
          do
          if eval "$argoCommand"; then
              echo "ArgoCD login OK"
              variableOk=1
              break
             else
               echo "ArgoCD login $i/10"
               sleep 20
             fi
          done
          if [[ $variableOk != "1" ]]
          then
              echo "Error en ArgoCD Login" >&2;
              exit 1
          fi
          
          echo 'creacion proyecto argocd'
          variableOk=0
          argoCommand="argocd proj create ${{inputs.teamProject}}-qa --upsert --dest https://kubernetes.default.svc,${{inputs.teamProject}-qa --src  ${{ inputs.ACR_FULL_NAME }}/helm --grpc-web"
          if eval "$argoCommand"; then
              echo "ArgoCD login OK"
              variableOk=1
              break
             else
               echo "ArgoCD login $i/10"
               sleep 20
             fi
          done
          if [[ $variableOk != "1" ]]
          then
              echo "Error en ArgoCD Login" >&2;
              exit 1
          fi

          echo 'creacion app argocd'
          variableOk=0
          argoCommand="argocd app create ${{inputs.teamProject}-${{inputs.appName}}-qa --repo ${{ inputs.ACR_FULL_NAME }} --helm-chart helm/${{inputs.teamProject}}-${{inputs.appName}} --upsert --helm-set Chart.yaml=Chart.yaml --helm-set-file values.yaml=values.yaml --helm-set-file Chart.yaml=Chart.yaml --revision ${{ inputs.helmChartVersionLatestQa}} --dest-namespace ${{inputs.teamProject}}-qa --dest-server https://kubernetes.default.svc --sync-policy auto --auto-prune --self-heal --project ${{inputs.teamProject}}-qa --grpc-web"
          if eval "$argoCommand"; then
              echo "ArgoCD login OK"
              variableOk=1
              break
             else
               echo "ArgoCD login $i/10"
               sleep 20
             fi
          done
          if [[ $variableOk != "1" ]]
          then
              echo "Error en ArgoCD Login" >&2;
              exit 1
          fi
          
          #Wait. Espera la synchronizacion, esperan 30s, esperan 5 veces
          argoWait="argocd app wait ${{inputs.teamProject}-${{inputs.appName}}-qa --health --operation --timeout 30"
          for i in {1..5}
          do
          if eval "$argoWait"; then
                echo "ArgoCD app wait OK"
                break
            else
                echo "ArgoCD app wait $i/5"
                sleep 20
            fi
          done
          #Limpia cache de argocd
          argocd app get ${{inputs.TeamProject}}-${{inputs.appName}}-qa refresh --hard-refresh --grpc-web 2>&1
          #Synch del repo
          argocd app sync ${{inputs.TeamProject}}-${{inputs.appName}}-qa --prune --force --retry-limit 5 --grpc-web --async
          
          #Wait. Espera la synchronizacion, esperan 30s, esperan 5 veces
          argoWait="argocd app wait ${{inputs.TeamProject}}-${{inputs.appName}}-qa --health --operation --timeout 30"
          for i in {1..5}
          do
          if eval "$argoWait"; then
                echo "ArgoCD app wait OK"
                break
            else
                echo "ArgoCD app wait $i/5"
                sleep 20
            fi
          done

